//
//  FiltersController.swift
//  IteoLogger
//
//  Created by Patryk Średziński on 05/02/2021.
//  Copyright (c) 2021 iteo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates by Patryk Średziński
//

import UIKit

protocol FiltersPresentable: IteoLoggerSpinnerPresentable & IteoLoggerAlertPresentable {
    func reloadFilter(dataSource: [FilterSectionItem], toggleLevelsText: String, toggleModulesText: String)
}

final class FiltersController: IteoLoggerBaseViewController {
    
    @IBOutlet private var closeButton: UIButton!
    @IBOutlet private var clearButton: UIButton!
    @IBOutlet private var saveButton: UIButton!
    @IBOutlet private var tableView: UITableView!
    
    private let interactor: FiltersInteractor
    private let viewModel: FiltersViewModel
    
    init(viewModel: FiltersViewModel, interactor: FiltersInteractor) {
        self.viewModel = viewModel
        self.interactor = interactor
        super.init(nibName: nil, bundle: .framework)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        interactor.reloadFilters()
    }
    
}

private extension FiltersController {
    
    private func setupView() {
        view.backgroundColor = .systemOrange
        setupButtons()
        setupTableView()
    }
    
    private func setupButtons() {
        setupButton(closeButton)
        setupButton(clearButton)
        setupButton(saveButton)
    }
    
    private func setupButton(_ button: UIButton) {
        button.backgroundColor = .systemBackground
        button.tintColor = .systemOrange
    }
    
    private func setupTableView() {
        let nibFilterCell = UINib(nibName: FilterCell.reuseIdentifier, bundle: .framework)
        tableView.register(nibFilterCell, forCellReuseIdentifier: FilterCell.reuseIdentifier)
        tableView.register(FilterSectionHeader.self, forHeaderFooterViewReuseIdentifier: FilterSectionHeader.reuseIdentifier)
    }
    
    private func toggleFilters(for sectionItem: FilterSectionItem) {
        switch sectionItem.type {
        case .levels:
            interactor.toggleAllLevels()
        case .modules:
            interactor.toggleAllModules()
        }
    }
    
    private func toggleText(for sectionItem: FilterSectionItem) -> String {
        switch sectionItem.type {
        case .levels:
            return viewModel.toggleLevelsText
        case .modules:
            return viewModel.toggleModulesText
        }
    }
    
    @IBAction private func closeTapped() {
        dismiss(animated: true, completion: nil)
    }
    
    @IBAction private func clearAllFilters(_ sender: UIButton) {
        interactor.clearAllFilters()
    }
    
    @IBAction private func saveFilters(_ sender: UIButton) {
        interactor.saveFilters()
    }
    
}

extension FiltersController: FiltersPresentable {
    
    func reloadFilter(dataSource: [FilterSectionItem], toggleLevelsText: String, toggleModulesText: String) {
        viewModel.dataSource = dataSource
        viewModel.toggleLevelsText = toggleLevelsText
        viewModel.toggleModulesText = toggleModulesText
        tableView.reloadData()
    }
    
}

extension FiltersController: UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return viewModel.dataSource.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let section = viewModel.dataSource[section]
        return section.items.count
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let sectionItem = viewModel.dataSource[section]
        guard let header = tableView.dequeueReusableHeaderFooterView(withIdentifier: FilterSectionHeader.reuseIdentifier) as? FilterSectionHeader else {
            return nil
        }
        header.setup(with: sectionItem.type.rawValue,
                     buttonTitle: toggleText(for: sectionItem),
                     action: { [weak self] in self?.toggleFilters(for: sectionItem) } )
        return header
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let section = viewModel.dataSource[indexPath.section]
        let cellItem = section.items[indexPath.row]
        guard let cell = tableView.dequeueReusableCell(withIdentifier: FilterCell.reuseIdentifier, for: indexPath) as? FilterCell else {
            return UITableViewCell()
        }
        switch cellItem {
        case .module(let item, let selected):
            cell.setup(with: item, selected: selected)
        case .level(let item, let selected):
            cell.setup(with: item, selected: selected)
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let section = viewModel.dataSource[indexPath.section]
        let cellItem = section.items[indexPath.row]
        switch cellItem {
        case .module(let item, _):
            interactor.toggleModule(item)
        case .level(let item, _):
            interactor.toggleLevel(item)
        }
    }
    
}
